/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution 
{
    public ListNode reverseList(ListNode head) 
    {
        ListNode prev=null;
        ListNode fwd=null;
        ListNode curr=head;
        while(curr!=null)
        {
            fwd=curr.next;
            curr.next=prev;
            prev=curr;
            curr=fwd;
        }
        return prev;
    }
    public ListNode reverseBetween(ListNode head, int left, int right) 
    {
        int i=1;
        ListNode temp=head;
        ListNode prev=null;
        ListNode revs=null;
        ListNode reve=null;
        ListNode fwd=null;
        while(temp!=null)
        {
            if(i==left-1)
                prev=temp;
            if(i==left)
                revs=temp;
            if(i==right)
                reve=temp;
            if(i==right+1)
                fwd=temp;
            temp=temp.next;
            i++;
        }
        if(prev!=null)
            prev.next=null;
        reve.next=null;
        ListNode rev=reverseList(revs);
        ListNode t=rev;
        if(prev!=null)
            prev.next=rev;
        while(t.next!=null)
        {
            t=t.next;
        }
        t.next=fwd;
        return (prev != null) ? head : rev;
    }
}